String

  String Literal
    'x'

  First String Character
    string[0]

  String Length
    string.length

  String Character Access
    string[number]

  String Last Character Access
    string[string.length - 1]

  String Character Assignment
    string[number] = 'x'

  String Concatenation
    string + string

Number
  Number Literal
    1

  Addition
    number + number

  Subtraction
    number - number

  Multiplication
    number * number

  Grouped Arithmetic
    (number - number) * number

  Greater-Than
    number > number

  Division
    number / number
      Note: Can throw exceptions

  parseInt
    parseInt(string)

Boolean

  Boolean Literals
    true
    false

  Negation
    !boolean

  Conjunction
    boolean && boolean

  Disjunction
    boolean || boolean

  Grouped Negation
    !(boolean && boolean)

  String Equality
    string === string

  Number Equality
    number === number

  Boolean Equality
    boolean === boolean

Control Flow

  If
    if (...) {...}

  Else
    else {...}

  Else If
    else if (...) {...}

  While
    while (...) {...}

  Array Iteration
    var n = 0
    while (n < array.length) {
      array[n]
      n = n + 1
    }

  Object Iteration
    var keys = Object.keys(object)
    var n = 0
    while (n < keys.length) {
      object[keys[n]]
      n = n + 1
    }

Array

  Array Literal
    []
    [element]
    [element, element]

  Array Element Access
    array[number]
    array[number] === undefined

  Array Element Assignment
    array[number] = element

  Array Length
    array.length

  Push
    array.push(element)

  Pop
    var x = array.pop()

  Array Indentity
    var x = []; var y = []; !(x === y)
    var x = []; var y = x; x === y
    var x = []; x[0] = 1; var y = x; x === y

Object

  Object Literal
    {}
    {'key': 'value'}
    {'key': 'value', 'key': 'value'}

  Object Property Access
    object[key]
    object[key] === undefined

  Object Property Assignment
    object[key] = value

  Keys
    Object.keys(object)

  Object Identity
    var x = {}; var y = {}; !(x === y)
    var x = {}; var y = x; x === y
    var x = {}; x[a] = b; var y = x; x === y

Variables

  Declaration
    var x = y

  Assignment
    x = y

  String Variable Mutation
    string = string + string

  Number Variable Mutation
    number = number + number

Functions

  Nullary Procedure
    var f = function () {
      ...
    }
    f()

  Nullary Function
    var f = function () {
      return ...
    }
    var x = f()

  Unary Procedure
    var f = function(x) {
      ...
    }
    f(x)

  Unary Function
    var f = function(x) {
      return ...
    }
    var x = f(y)

  n-ary Procedure
    var f = function(x, y) {
      ...
    }
    f(x, y)

  n-ary Function
    var f = function(x, y) {
      return ...
    }
    var a = f(b, c)

  Closure
    var x = y
    var f = function () {
      ...
    }
    f()

  Closure with Mutation
    var x = y
    var f = function () {
      x = ...
    }
    f()
    f()

  Functions within Functions
    var f = function () {
      var g = function () {
      }
      g()
    }
    f()

  Functions taking Function Arguments
    var f = function (g) {
      g()
    }
    var h = function () {
      ...
    }
    f(h)

  Functions taking Function Literals
    var f = function (g) {
      g()
    }
    f(function () {
      ...
    })

  Functions returning Functions
    var f = function () {
      var g = function () {
        ...
      }
      return g
    }
